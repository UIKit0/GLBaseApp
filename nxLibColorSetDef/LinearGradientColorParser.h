/** \file
 *  This C header file was generated by $ANTLR version 3.3 Nov 30, 2010 12:45:30
 *
 *     -  From the grammar source file : LinearGradientColor.g
 *     -                            On : 2011-09-23 20:02:23
 *     -                for the parser : LinearGradientColorParserParser *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser LinearGradientColorParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pLinearGradientColorParser, which is returned from a call to LinearGradientColorParserNew().
 *
 * The methods in pLinearGradientColorParser are  as follows:
 *
 *  - nx::color::LinearGradientColor*      pLinearGradientColorParser->linearColor(pLinearGradientColorParser)
 *  - void      pLinearGradientColorParser->linearColorDirection(pLinearGradientColorParser)
 *  - void      pLinearGradientColorParser->linerColorElement(pLinearGradientColorParser)
 *  - void      pLinearGradientColorParser->rgba(pLinearGradientColorParser)
 *  - void      pLinearGradientColorParser->hsba(pLinearGradientColorParser)
 *  - void      pLinearGradientColorParser->pos(pLinearGradientColorParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef _LinearGradientColorParser_H
#define _LinearGradientColorParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

// @parser::includes
#include <d2d1.h>
#include <iostream>
#include <vector>
#include "nx/color/GradientDirection.h"
#include "nx/color/LinearGradientColor.h"
#include "nx/color/internal/Utils.h"
using namespace nx::color;
using namespace nx::color::internal;


#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
    typedef struct LinearGradientColorParser_Ctx_struct LinearGradientColorParser, * pLinearGradientColorParser;



#ifdef  ANTLR3_WINDOWS
// Disable: Unreferenced parameter,                         - Rules with parameters that are not used
//          constant conditional,                           - ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable                 - tree rewrite variables declared but not needed
//          Unreferenced local variable                     - lexer rule declares but does not always use _type
//          potentially unitialized variable used           - retval always returned from a rule
//          unreferenced local function has been removed    - susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

    /* globalAttributeScopeDecl(scope)
     */
    /* makeScopeSet()
     */
    /** Definition of the ColorSet scope variable tracking
    *  structure. An instance of this structure is created by calling
    *  LinearGradientColorParser_ColorSetPush().
    */
    typedef struct  LinearGradientColorParser_ColorSet_SCOPE_struct {
        /** Function that the user may provide to be called when the
         *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
         *
         * \param POinter to an instance of this typedef/struct
         */
        void    (ANTLR3_CDECL *free)    (struct LinearGradientColorParser_ColorSet_SCOPE_struct * frame);

        /* =============================================================================
         * Programmer defined variables...
         */
        nx::color::GRADIENT_DIRECTION gradientDirection;
        float red;
        float green;
        float blue;
        float alpha;
        float position;
        nx::color::LinearGradientColor* color;

        /* End of programmer defined variables
         * =============================================================================
         */
    }
    LinearGradientColorParser_ColorSet_SCOPE, * pLinearGradientColorParser_ColorSet_SCOPE;

    /** Context tracking structure for LinearGradientColorParser
     */
    struct LinearGradientColorParser_Ctx_struct {
        /** Built in ANTLR3 context tracker contains all the generic elements
         *  required for context tracking.
         */
        pANTLR3_PARSER   pParser;
        /* globalAttributeScopeDef(scope)
         */
        /** Pointer to the  ColorSet stack for use by pLinearGradientColorParser_ColorSetPush()
         *  and pLinearGradientColorParser_ColorSetPop()
         */
        pANTLR3_STACK pLinearGradientColorParser_ColorSetStack;
        ANTLR3_UINT32 pLinearGradientColorParser_ColorSetStack_limit;
        /** Pointer to the top of the stack for the global scope pLinearGradientColorParser_ColorSetStack
         */
        pLinearGradientColorParser_ColorSet_SCOPE    (*pLinearGradientColorParser_ColorSetPush)(struct LinearGradientColorParser_Ctx_struct * ctx);
        pLinearGradientColorParser_ColorSet_SCOPE    pLinearGradientColorParser_ColorSetTop;


        nx::color::LinearGradientColor* (*linearColor) (struct LinearGradientColorParser_Ctx_struct * ctx);
        void (*linearColorDirection)   (struct LinearGradientColorParser_Ctx_struct * ctx);
        void (*linerColorElement)  (struct LinearGradientColorParser_Ctx_struct * ctx);
        void (*rgba)   (struct LinearGradientColorParser_Ctx_struct * ctx);
        void (*hsba)   (struct LinearGradientColorParser_Ctx_struct * ctx);
        void (*pos)    (struct LinearGradientColorParser_Ctx_struct * ctx);
        // Delegated rules

        const char * (*getGrammarFileName)();
        void            (*reset)  (struct LinearGradientColorParser_Ctx_struct * ctx);
        void        (*free)   (struct LinearGradientColorParser_Ctx_struct * ctx);

    };

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
    ANTLR3_API pLinearGradientColorParser LinearGradientColorParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
    ANTLR3_API pLinearGradientColorParser LinearGradientColorParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

    /** Symbolic definitions of all the tokens that the parser will work with.
     * \{
     *
     * Antlr will define EOF, but we can't use that as it it is too common in
     * in C header files and that would be confusing. There is no way to filter this out at the moment
     * so we just undef it here for now. That isn't the value we get back from C recognizers
     * anyway. We are looking for ANTLR3_TOKEN_EOF.
     */
#ifdef  EOF
#undef  EOF
#endif
#ifdef  Tokens
#undef  Tokens
#endif
#define EOF      -1
#define T__15      15
#define T__16      16
#define T__17      17
#define T__18      18
#define T__19      19
#define T__20      20
#define T__21      21
#define T__22      22
#define T__23      23
#define T__24      24
#define ID      4
#define HEX_DIGIT      5
#define HEXINT      6
#define EXPONENT      7
#define FLOAT      8
#define COMMENT      9
#define WS      10
#define ESC_SEQ      11
#define STRING      12
#define UNICODE_ESC      13
#define OCTAL_ESC      14
#ifdef  EOF
#undef  EOF
#define EOF ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

    /* End of token definitions for LinearGradientColorParser
     * =============================================================================
     */
    /** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
